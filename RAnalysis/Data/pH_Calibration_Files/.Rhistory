for (i in 1:3) plot(1, 1, type = "n")
plot(1,  type="n", axes=TRUE, xlab="", ylab="Percent Cover", ylim=c(0,35), xlim=c(2005,2015))
points(coral.cover.1 ~ year, data= annual.coral.site, ylim=c(0,35), col="brown", type="b")
points(coral.cover.2 ~ year, data= annual.coral.site, ylim=c(0,35), col="red", type="b")
points(coral.cover.3 ~ year, data= annual.coral.site, ylim=c(0,35), col="orange", type="b")
points(coral.cover.4 ~ year, data= annual.coral.site, ylim=c(0,35), col="green", type="b")
points(coral.cover.5 ~ year, data= annual.coral.site, ylim=c(0,35), col="blue", type="b")
points(coral.cover.6 ~ year, data= annual.coral.site, ylim=c(0,35), col="purple", type="b")
points(algal.cover.1 ~ year, data= annual.algae.site, ylim=c(0,35), col="brown", type="b",lty=3)
points(algal.cover.2 ~ year, data= annual.algae.site, ylim=c(0,35), col="red", type="b",lty=3)
points(algal.cover.3 ~ year, data= annual.algae.site, ylim=c(0,35), col="orange", type="b",lty=3)
points(algal.cover.4 ~ year, data= annual.algae.site, ylim=c(0,35), col="green", type="b",lty=3)
points(algal.cover.5 ~ year, data= annual.algae.site, ylim=c(0,35), col="blue", type="b",lty=3)
points(algal.cover.6 ~ year, data= annual.algae.site, ylim=c(0,35), col="purple", type="b",lty=3)
legend('topright', c("Site1", "Site2","Site3", "Site4","Site5", "Site6") , lty=1, col=c('red', 'orange', 'brown',' green', 'blue', 'purple'), bty='n', cex=.75)
plot(1,  type="n", axes=TRUE, xlab="", ylab="Percent Cover", ylim=c(0,35), xlim=c(2005,2015))
points(coral.cover.1 ~ year, data= annual.coral.site, ylim=c(0,35), col="brown", type="b")
points(coral.cover.2 ~ year, data= annual.coral.site, ylim=c(0,35), col="red", type="b")
points(coral.cover.3 ~ year, data= annual.coral.site, ylim=c(0,35), col="orange", type="b")
points(algal.cover.1 ~ year, data= annual.algae.site, ylim=c(0,35), col="brown", type="b",lty=3)
points(algal.cover.2 ~ year, data= annual.algae.site, ylim=c(0,35), col="red", type="b",lty=3)
points(algal.cover.3 ~ year, data= annual.algae.site, ylim=c(0,35), col="orange", type="b",lty=3)
legend('topright', c("Site1", "Site2","Site3") , lty=1, col=c('red', 'orange', 'brown'), bty='n', cex=.75)
plot(1,  type="n", axes=TRUE, xlab="", ylab="Percent Cover", ylim=c(0,35), xlim=c(2005,2015))
points(coral.cover.4 ~ year, data= annual.coral.site, ylim=c(0,35), col="green", type="b")
points(coral.cover.5 ~ year, data= annual.coral.site, ylim=c(0,35), col="blue", type="b")
points(coral.cover.6 ~ year, data= annual.coral.site, ylim=c(0,35), col="purple", type="b")
points(algal.cover.4 ~ year, data= annual.algae.site, ylim=c(0,35), col="green", type="b",lty=3)
points(algal.cover.5 ~ year, data= annual.algae.site, ylim=c(0,35), col="blue", type="b",lty=3)
points(algal.cover.6 ~ year, data= annual.algae.site, ylim=c(0,35), col="purple", type="b",lty=3)
legend('topright', c( "Site4","Site5", "Site6") , lty=1, col=c(' green', 'blue', 'purple'), bty='n', cex=.75)
data <- read.csv("~/MyProjects/MCR_LTER/MCR_Jr/MCR_jr_2018/MCR_Backreef/RAnalysis/Data/mcr_lter_coral_cover_backreef_wide_20160218.csv")
annual.coral.site <- aggregate(as.numeric(coral)~site*year, data=data, FUN=mean)
colnames(annual.coral.site) <- c("site", "year", "coral.cover")
annual.coral.site <-reshape(annual.coral.site, timevar = "site", idvar = "year", direction = "wide")
annual.coral.site$year <- as.character(annual.coral.site$year)
annual.algae.site <- aggregate(as.numeric(macroalgae)~site*year, data=data, FUN=mean)
colnames(annual.algae.site) <- c("site", "year", "algal.cover")
annual.algae.site <-reshape(annual.algae.site, timevar = "site", idvar = "year", direction = "wide")
annual.algae.site$year <- as.character(annual.algae.site$year)
pdf("/Users/hputnam/MyProjects/MCR_LTER/MCR_Jr/MCR_jr_2018/MCR_Backreef/RAnalysis/Output/Backreef_coral_algae.pdf")
m <- rbind(c(1, 1), c(2, 3))
print(m)
layout(m)
layout.show(3)
layout(m)
par(mar = c(3, 3, 0, 0))
for (i in 1:3) plot(1, 1, type = "n")
plot(1,  type="n", axes=TRUE, xlab="", ylab="Percent Cover", ylim=c(0,35), xlim=c(2005,2015))
points(coral.cover.1 ~ year, data= annual.coral.site, ylim=c(0,35), col="brown", type="b")
points(coral.cover.2 ~ year, data= annual.coral.site, ylim=c(0,35), col="red", type="b")
points(coral.cover.3 ~ year, data= annual.coral.site, ylim=c(0,35), col="orange", type="b")
points(coral.cover.4 ~ year, data= annual.coral.site, ylim=c(0,35), col="green", type="b")
points(coral.cover.5 ~ year, data= annual.coral.site, ylim=c(0,35), col="blue", type="b")
points(coral.cover.6 ~ year, data= annual.coral.site, ylim=c(0,35), col="purple", type="b")
points(algal.cover.1 ~ year, data= annual.algae.site, ylim=c(0,35), col="brown", type="b",lty=3)
points(algal.cover.2 ~ year, data= annual.algae.site, ylim=c(0,35), col="red", type="b",lty=3)
points(algal.cover.3 ~ year, data= annual.algae.site, ylim=c(0,35), col="orange", type="b",lty=3)
points(algal.cover.4 ~ year, data= annual.algae.site, ylim=c(0,35), col="green", type="b",lty=3)
points(algal.cover.5 ~ year, data= annual.algae.site, ylim=c(0,35), col="blue", type="b",lty=3)
points(algal.cover.6 ~ year, data= annual.algae.site, ylim=c(0,35), col="purple", type="b",lty=3)
legend('topright', c("Site1", "Site2","Site3", "Site4","Site5", "Site6") , lty=1, col=c('brown', 'red', 'orange',' green', 'blue', 'purple'), bty='n', cex=.75)
plot(1,  type="n", axes=TRUE, xlab="", ylab="Percent Cover", ylim=c(0,35), xlim=c(2005,2015))
points(coral.cover.1 ~ year, data= annual.coral.site, ylim=c(0,35), col="brown", type="b")
points(coral.cover.2 ~ year, data= annual.coral.site, ylim=c(0,35), col="red", type="b")
points(coral.cover.3 ~ year, data= annual.coral.site, ylim=c(0,35), col="orange", type="b")
points(algal.cover.1 ~ year, data= annual.algae.site, ylim=c(0,35), col="brown", type="b",lty=3)
points(algal.cover.2 ~ year, data= annual.algae.site, ylim=c(0,35), col="red", type="b",lty=3)
points(algal.cover.3 ~ year, data= annual.algae.site, ylim=c(0,35), col="orange", type="b",lty=3)
legend('topright', c("Site1", "Site2","Site3") , lty=1, col=c('brown', 'red', 'orange'), bty='n', cex=.75)
plot(1,  type="n", axes=TRUE, xlab="", ylab="Percent Cover", ylim=c(0,35), xlim=c(2005,2015))
points(coral.cover.4 ~ year, data= annual.coral.site, ylim=c(0,35), col="green", type="b")
points(coral.cover.5 ~ year, data= annual.coral.site, ylim=c(0,35), col="blue", type="b")
points(coral.cover.6 ~ year, data= annual.coral.site, ylim=c(0,35), col="purple", type="b")
points(algal.cover.4 ~ year, data= annual.algae.site, ylim=c(0,35), col="green", type="b",lty=3)
points(algal.cover.5 ~ year, data= annual.algae.site, ylim=c(0,35), col="blue", type="b",lty=3)
points(algal.cover.6 ~ year, data= annual.algae.site, ylim=c(0,35), col="purple", type="b",lty=3)
legend('topright', c( "Site4","Site5", "Site6") , lty=1, col=c(' green', 'blue', 'purple'), bty='n', cex=.75)
dev.off()
annual.coral.site.se <- aggregate(as.numeric(coral)~site*year, data=data, FUN = function(x) c(mean = mean(x), se = std.error(x)))
?std.error
View(data)
head(data)
packageVersion(phyloseq)
# Load libraries
library(phyloseq)
packageVersion(phyloseq)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
# Load libraries
library(phyloseq)
install(phyloseq)
# Load libraries
library(phyloseq)
packageVersion
packageVersion(phyloseq)
biocLite("phyloseq")
install.packages("XML")
xmlfile=xmlParse("http://166.122.78.194:80/cgi-bin/datalog.xml?sdate=1806030000&days=2")
require("XML")
require("plyr")
require("ggplot2")
require("gridExtra")
xmlfile <- xmlParse("http://166.122.78.194:80/cgi-bin/datalog.xml?sdate=1806030000&days=2")
xmlfile
class(xmlfile) #"XMLInternalDocument" "XMLAbstractDocument"
?grep()
grep("Tmp_XL", xmlfile )
xmlTreeParse(xmlfile)
xmlfile
## get value of the first node
xmlValue(xmlfile[[1]])
xmlRoot(xmlfile)
xmltop = xmlRoot(xmlfile) #gives content of root
xmltop[[1]]
xmltop[[2]]
xmltop[[3]]
xmltop[[4]]
grep("Tmp_XL", xmltop[[4]] )
#Turning XML into a dataframe
Apex.Data <-ldply(xmlToList(xmlfile), data.frame) #completes with errors: "row names were found from a short variable and have been discarded"
View(Apex.Data)
Apex.Data <- Apex.Data[Apex.Data[25]=='Y',] #gets rid of duplicated rows
View(Apex.Data)
xmlfile <- xmlParse("http://166.122.78.194:80/cgi-bin/datalog.xml?sdate=1806030000&days=2") #read in the last 2 days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
View(Apex.Data)
Apex.Data2 <- Apex.Data[-3,]
length(ApexData)
length(Apex.Data)
nrows(Apex.Data
)
nrow(Apex.Data)
xmlfile <- xmlParse("http://166.122.78.194:80/cgi-bin/datalog.xml?sdate=1806030000&days=2") #read in the last 2 days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
Apex.Data2 <- Apex.Data[4:nrow(Apex.Data),]
View(Apex.Data2)
-nrow(Apex.Data)[-2,]
nrow(Apex.Data[-2]
)
?tail
Apex.Data2 <- head(Apex.Data2,-2)
View(Apex.Data2)
head(Apex.Data2,-2)
Apex.Data2[c(1:nrow(Apex.Data2)-2,)]
View(Apex.Data2)
head(Apex.Data2[,c(3,6,9,15)])
grepl("Salt_L", Apex.Data2)
Apex.Data2[70]
Apex.Data2[75]
Apex.Data2[78]
Apex.Data2[72]
Apex.Data2[81]
Apex.Data2[90]
Probe.Data <- Apex.Data2[,c(3,6,9,15, 75, 78, 72, 81, 84, 90)]
View(Probe.Data)
colnames(Apex.Data2) <- c("Date.Time", "Tmp_XL", "pH_XL", "Salt_XL", "Tmp_L", "pH_L", "Salt_L","Tmp_A", "pH_A", "Salt_A")
Probe.Data <- Apex.Data2[,c(3,6,9,15, 75, 78, 72, 81, 84, 90)]
colnames(Probe.Data ) <- c("Date.Time", "Tmp_XL", "pH_XL", "Salt_XL", "Tmp_L", "pH_L", "Salt_L","Tmp_A", "pH_A", "Salt_A")
plot(Probe.Data$Date.Time, Probe.Data$Tmp_XL)
Probe.Data$Tmp_XL
plot(Probe.Data$Date.Time, as.numeric(Probe.Data$Tmp_XL))
Probe.Data$Tmp_XL
as.numeric(Probe.Data$Tmp_XL)
as.numeric(as.character(Probe.Data$Tmp_XL)))
as.numeric(as.character(Probe.Data$Tmp_XL))
plot(Probe.Data$Date.Time, as.numeric(as.character(Probe.Data$Tmp_XL)))
?plot
plot(Probe.Data$Date.Time, as.numeric(as.character(Probe.Data$Tmp_XL)), type=l)
plot(Probe.Data$Date.Time, as.numeric(as.character(Probe.Data$Tmp_XL)), type="l")
plot(Probe.Data$Date.Time, as.numeric(as.character(Probe.Data$Tmp_XL)), type="l", col = "red")
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, xaxt = "n", type = "l")
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data,  type = "l")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data)
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data,  type = "l", ylim=(23,28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data,  type = "l", ylim=c(23,28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data,  type = "l", ylim=c(25,28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data,  type = "l", ylim=c(25,28), col = "red")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "red")
plot(0,type='n',axes=FALSE,ann=FALSE)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
plot.new()
plot.window(ylim=c(25,28) )
plot.window(xlim=c(0, nrow(Probe.Data), ylim=c(25,28) )
plot.new()
plot.window(xlim=c(0, nrow(Probe.Data)), ylim=c(25,28) )
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data), ylim=c(25, 28))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data), ylim=c(25, 28)))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(7, 8))
lines(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
class(Probe.Data$Date.Time)
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ as.character(Date.Time), Probe.Data, col = "grey")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(7, 8))
lines(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
par(mfrow=c(3,1))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(7, 8))
lines(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(7, 8))
lines(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
par(mfrow=c(3,1))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(7, 8))
lines(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(31, 35))
lines(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
Probe.Data$Date.Time
as.Date
?as.Date
as.Date(strptime(Probe.Data$Date.Time, "%m/%d/%Y %h%m%s"))
as.Date(strptime(Probe.Data$Date.Time, "%m/%d/%Y %h:%m:%s"))
as.Date(strptime(Probe.Data$Date.Time, "%m/%d/%y %H:%M:%S"))
as.POSIXct(strptime(Probe.Data$Date.Time, "%m/%d/%y %H:%M:%S"))
strptime(Probe.Data$Date.Time, format="%m/%d/%y %H:%M:%S")
strptime(as.character(Probe.Data$Date.Time), format="%m/%d/%y %H:%M:%S")
as.Date(strptime(as.character(Probe.Data$Date.Time), format="%m/%d/%y %H:%M:%S"))
class(Probe.Data$Date.Time)
as.character(Probe.Data$Date.Time)
strptime(as.character(Probe.Data$Date.Time), format="%m/%d/%y, %H:%M:%S")
strptime(Probe.Data$Date.Time, format="%m/%d/%y %H:%M:%S")
as.Date(Probe.Data$Date.Time, format = "%m/%d/%y, %H:%M:%S")
class(Probe.Data$Date.Time)
head(Probe.Data$Date.Time)
as.Date(Probe.Data$Date.Time, format = "%m/%d/%Y, %H:%M:%S")
as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y, %H:%M:%S")
head(Probe.Data$Date.Time)
as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S")
?as.POSIXct
as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S", tz="HST")
par(mfrow=c(3,1))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
dev.off()
class(Probe.Data$Date.Time)
Probe.Data$Date.Time <- as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S", tz="HST")
par(mfrow=c(3,1))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
par(mfrow=c(3,1))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
class(Probe.Data$Date.Time)
#keep columnes with
Probe.Data <- Apex.Data2[,c(3,6,9,15, 75, 78, 72, 81, 84, 90)]
colnames(Probe.Data ) <- c("Date.Time", "Tmp_XL", "pH_XL", "Salt_XL", "Tmp_L", "pH_L", "Salt_L","Tmp_A", "pH_A", "Salt_A")
Probe.Data$Date.Time <- as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S", tz="HST")
View(Probe.Data)
?axis.POSIXct
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(1)
axis.POSIXct(1, Date.Time, Probe.Data)
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(1, Date.Time, Probe.Data)
axis.POSIXct(1, Date.Time, data=Probe.Data)
axis.POSIXct(1, Probe.Data$Date.Time)
dev.off()
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(1, Probe.Data$Date.Time)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(2, Probe.Data$Date.Time)
par(mfrow=c(3,1))
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(2, Probe.Data$Date.Time)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(2, Probe.Data$Date.Time)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(2, Probe.Data$Date.Time)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(2, Probe.Data$Date.Time)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
dev.off()
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(2, Probe.Data$Date.Time)
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
Probe.Data$Date.Time
class(Probe.Data$Date.Time)
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time, by="day")
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time, by="day")
View(Probe.Data)
head(Probe.Data n=5)
head(Probe.Data, n=5)
head(Probe.Data, n=-5)
tail(Probe.Data, n=5)
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "white")
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
#plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "white", ylim=c(25, 28))
lines(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
#plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "black", type="l", ylim=c(25.5, 28))
#plot(1, type="n", xlab="Time", ylab="Temperature °C", xlim=c(0, nrow(Probe.Data)), ylim=c(25, 28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "red", type="l", ylim=c(25.5, 28))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28))
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
getwd()
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(3,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(TpH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Salinity psu")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(3,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Salinity psu")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(3,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(7.1, 8.1),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(30, 35),  xlab="Time", ylab="Salinity psu")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(3,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(7.1, 8.1),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25, 35),  xlab="Time", ylab="Salinity psu")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(3,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(7.1, 8.1),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(20, 35),  xlab="Time", ylab="Salinity psu")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
xmlfile <- xmlParse("http://166.122.78.194:80/cgi-bin/datalog.xml?sdate=1806030000&days=5") #read in the last 2 days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
Apex.Data2 <- Apex.Data[4:nrow(Apex.Data),]
Apex.Data2 <- head(Apex.Data2,-2)
head(Apex.Data2)
xmlfile <- xmlParse("http://166.122.78.194:80/cgi-bin/datalog.xml?sdate=1806010000&days=3") #read in the last 2 days of Apex data
Apex.Data <- ldply(xmlToList(xmlfile), data.frame) #convert xml to dataframe
Apex.Data2 <- Apex.Data[4:nrow(Apex.Data),]
Apex.Data2 <- head(Apex.Data2,-2)
#keep columnes with
Probe.Data <- Apex.Data2[,c(3,6,9,15, 75, 78, 72, 81, 84, 90)]
colnames(Probe.Data ) <- c("Date.Time", "Tmp_XL", "pH_XL", "Salt_XL", "Tmp_L", "pH_L", "Salt_L","Tmp_A", "pH_A", "Salt_A")
Probe.Data$Date.Time <- as.POSIXct(Probe.Data$Date.Time, format = "%m/%d/%Y %H:%M:%S", tz="HST")
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(3,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(7.1, 8.1),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(20, 35),  xlab="Time", ylab="Salinity psu")
lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
pdf("~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Output.pdf")
par(mfrow=c(2,1))
plot(as.numeric(as.character(Tmp_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(25.5, 28),  xlab="Time", ylab="Temperature °C")
lines(as.numeric(as.character(Tmp_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(Tmp_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
plot(as.numeric(as.character(pH_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(7.1, 8.1),  xlab="Time", ylab="pH NBS")
lines(as.numeric(as.character(pH_L)) ~ Date.Time, Probe.Data, col = "red")
lines(as.numeric(as.character(pH_A)) ~ Date.Time, Probe.Data, col = "blue")
axis.POSIXct(side=1, Probe.Data$Date.Time)
# plot(as.numeric(as.character(Salt_XL)) ~ Date.Time, Probe.Data, col = "grey", type="l", ylim=c(20, 35),  xlab="Time", ylab="Salinity psu")
# lines(as.numeric(as.character(Salt_L)) ~ Date.Time, Probe.Data, col = "red")
# lines(as.numeric(as.character(Salt_A)) ~ Date.Time, Probe.Data, col = "blue")
# axis.POSIXct(side=1, Probe.Data$Date.Time)
dev.off()
write.csv(Probe.Data, "~/MyProjects/BioMin_HIS/RAnalysis/Output/Apex_Data_Output.csv")
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
source('~/MyProjects/BioMin_HIS/RAnalysis/Scripts/Apex_Data_Extract.R')
setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/Data/pH_Calibration_Files/") #set working directory
Calib.Data <-read.table("20180627.csv", header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
R2<-summary(model)$r.squared
plot(mVTris ~ TTris, data=Calib.Data)
abline(lm(mVTris ~ TTris, data=Calib.Data))
legend('topleft', legend = bquote(R^2 == .(format(R2, digits = 3))), bty='n')
