####################################################
rm(list=ls())
#set working directory--------------------------------------------------------------------------------------------------
setwd <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/")
# call ouput csv file from both Ta and discrete daily seawater chemistry
chem<-read.csv("Seawater_chemistry_table_Output_All.csv", header=T, sep=",", na.string="NA", as.is=T)
chem
#set working directory--------------------------------------------------------------------------------------------------
setwd <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/")
main<-getwd()
# call ouput csv file from both Ta and discrete daily seawater chemistry
chem<-read.csv("Seawater_chemistry_table_Output_All.csv", header=T, sep=",", na.string="NA", as.is=T)
chem
#set working directory--------------------------------------------------------------------------------------------------
path <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/")
chem.fil <- Seawater_chemistry_table_Output_All.csv
chem.file <- Seawater_chemistry_table_Output_All.csv
####################################################
rm(list=ls())
#set working directory--------------------------------------------------------------------------------------------------
path <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output")
# call ouput csv file from both Ta and discrete daily seawater chemistry
chem.file <- "/Seawater_chemistry_table_Output_All.csv"
chem<-read.csv(file.path(path, chem.file), header=T, sep=",", na.string="NA", as.is=T)
chem
#LIBRARY-----------------------------------------------------------------------------------------------------------
library(dplyr)
library(plyr)
library(ggplot2)
library(lme4)
library(ggplot2)
library(lsmeans)
#set working directory--------------------------------------------------------------------------------------------------
path <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output")
# call ouput csv file from both Ta and discrete daily seawater chemistry
chem.file <- "/Seawater_chemistry_table_Output_All.csv"
chem<-read.csv(file.path(path, chem.file), header=T, sep=",", na.string="NA", as.is=T)
chem
names(chem)
salinity <- chem %>% group_by(Date,Treatment,Salinity) %>% summarise_each(funs(mean,sd,se=sd/sqrt(n())))
salinity
names(chem)
salinity <- chem %>% group_by(Date,Treatment,Salinity) %>% summarise_each(funs(mean,sd,se=sd/sqrt(n())))
salinity <- chem %>% group_by(Date,Salinity) %>% summarise_each(funs(mean,sd,se=sd/sqrt(n())))
salinity <- chem %>% group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error)))
library(plotrix)
salinity <- chem %>% group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error)))
salinity <- chem %>%
group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error))
salinity
chem$Date
chem$Date <- as.character(chem$Date)
chem$Date
salinity <- chem %>%
group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error))
salinity
aggregate(Date ~ Salinity, chem, mean )
chem$Date
aggregate(Salinity ~ Date, chem, mean )
salinity <- chem %>%
group_by(Date,Treatment,Salinity)
salinity
chem$Treatment
chem.om <- na.omit(chem)
chem$Temperature
chem$Treatment
chem.om$Treatment
chem$Treatment
chem.2 <- chem[- grep("na", chem$Treatment),] # ommit all rows that have "na" in chem$Treatment
chem.2$Treatment
salinity <- chem.2 %>%
group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error))
chem.2$Salinity
chem.2$Date
sal <- chem.2 %>%
group_by(Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error))
sal <- chem.2 %>%
group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd/std.error))
chem.2 %>%
group_by(Date,Treatment,Salinity) %>%
summarise_each(funs(mean,sd,se=sd(.)/sqrt(n())))
names(chem.2)
sal <- chem.2 %>%
group_by(Date, Treatment) %>%
summarise(mean = mean(Salinity),
std = sd(Salinity))
sal
sal <- chem.2 %>%
group_by(Date) %>%
summarise(mean = mean(Salinity),
std = sd(Salinity))
sal
sal %>%
group_by(Date) %>%
summarise(mean = mean(chem.2$Salinity),
std = sd(chem.2$Salinity))
sal %>%
group_by(chem.2$Date) %>%
summarise(mean = mean(chem.2$Salinity),
std = sd(chem.2$Salinity))
sal <- chem.2 %>%
group_by(Date, Treatment) %>%
summarise(mean = mean(Salinity),
std = sd(Salinity))
sal
(chem.2)
aggregate(Salinity ~ Date + Treatment + Tank, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
#Geoduck Conditioning
#Data published in X
#Title:
#Contact: Hollie Putnam hollieputnam@gmail.com
#Supported by: FFAR
#See Readme file for details on data files and metadata
# path changes made on 20180712 sor SJG personal comp at Pt Whitney - original paths kept with #
rm(list=ls()) # removes all prior objects
#R Version: R version 3.3.1
#RStudio Version: 1.0.44
######Read in required libraries#####
library(car) #version 2.1-4 Date: 2016-11-30 Depends: R (>= 3.2.0) Imports:MASS, mgcv, nnet, pbkrtest (>= 0.3-2), quantreg, grDevices, utils, stats, graphics, Rcpp
library(ggplot2) #version 2.2.1 Date/Publication: 2016-12-30 Depends: R (>= 3.1) Imports: digest, grid, gtable (>= 0.1.1), MASS, plyr (>= 1.7.1),reshape2, scales (>= 0.4.1), stats, tibble, lazyeval
library(gridExtra) #version: 2.2.1 Date/Publication: 2016-02-29 Depends: R(>= 2.5.0) Imports: gtable, grid, grDevices, graphics, utils
library(lsmeans)  #version: 2.26-3 Date: 2017-05-09 Depends: estimability, methods, R (>= 3.0) Imports: graphics, stats, utils, nlme, coda (>= 0.17), multcomp, plyr,mvtnorm, xtable (>= 1.8-2)
library(multcomp) #version: 1.4-6 Date: 2016-07-14 Depends: stats, graphics, mvtnorm (>= 1.0-3), survival (>= 2.39-4), TH.data (>= 1.0-2)
library(nlme) #version: 3.1-131 Date: 2017-02-06 Depends: R (>= 3.0.2) Imports: graphics, stats, utils, lattice
library(plotrix) #version: 3.6-5 Date: 2017-05-09 Depends: NA Imports: grDevices, graphics, stats, utils
library(plyr) #version: 1.8.4 Date/Publication: 2016-06-08 Depends: R (>= 3.1.0) Imports: Rcpp (>= 0.11.0)
library(reshape) #version: 3.3.1 Date/Publication: 2016-06-24  Depends: R (>= 3.3.1)
library(seacarb) #version: 3.2 Date/Publication: 2017-06-19 Depends: R (>= 2.10), oce, gsw Imports: NA
library(grid) #version: 3.3.1 Date/Publication: 2016-06-24  Depends: R (>= 3.3.1)
library(xtable) #version 1.8-2 Date/Publication: 2016-01-08 Depends: R (>= 2.10.0)
library(lme4) #version: 1.1-13 Date/Publication: 2017-04-19 Depends: R (>= 3.0.2), Matrix (>= 1.1.1), methods, stats Imports: graphics, grid, splines, utils, parallel, MASS, lattice, nlme(>= 3.1-123), minqa (>= 1.1.15), nloptr (>= 1.0.4)
library(blmeco) #version: 1.1 Date/Publication: 2015-08-22 Depends: R (>= 3.0.0), stats, MASS Imports: MuMIn, arm, lme4
library(MuMIn) #version: 1.15.6 Date/Publication: 2016-01-07 Depends: R (>= 3.0.0) Imports: graphics, methods, Matrix, stats, stats4
#####Required Data files#####
#CRM_TA_Data.csv
#Daily_Temp_pH_Sal.csv
#~/MyProjects/BioMin_HIS/RAnalysis/Data/pH_Calibration_Files
#############################################################
setwd("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Data") #set working directory
#setwd("~/MyProjects/Geoduck_Conditioning/RAnalysis/Data") #set working directory
mainDir<-'C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/' #set main directory
# mainDir<-'~/MyProjects/Geoduck_Conditioning/RAnalysis/' #set main directory
#############################################################
##### DISCRETE pH CALCULATIONS #####
# path <-("~/MyProjects/Geoduck_Conditioning/RAnalysis/Data/pH_Calibration_Files/")
path <-("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Data/pH_Calibration_Files/")
file.names<-list.files(path = path, pattern = "csv$") #list all the file names in the folder to get only get the csv files
pH.cals <- data.frame(matrix(NA, nrow=length(file.names), ncol=3, dimnames=list(file.names,c("Date", "Intercept", "Slope")))) #generate a 3 column dataframe with specific column names
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
Calib.Data <-read.table(file.path(path,file.names[i]), header=TRUE, sep=",", na.string="NA", as.is=TRUE) #reads in the data files
model <-lm(mVTris ~ TTris, data=Calib.Data) #runs a linear regression of mV as a function of temperature
coe <- coef(model) #extracts the coeffecients
summary(model)$r.squared
plot(Calib.Data$mVTris, Calib.Data$TTris)
pH.cals[i,2:3] <- coe #inserts them in the dataframe
pH.cals[i,1] <- substr(file.names[i],1,8) #stores the file name in the Date column
}
colnames(pH.cals) <- c("Calib.Date",  "Intercept",  "Slope") #rename columns
pH.cals #view data
#constants for use in pH calculation
R <- 8.31447215 #gas constant in J mol-1 K-1
F <-96485.339924 #Faraday constant in coulombs mol-1
#read in probe measurements of pH, temperature, and salinity from tanks
daily <- read.csv("Daily_Temp_pH_Sal.csv", header=TRUE, sep=",", na.strings="NA") #load data with a header, separated by commas, with NA as NA
#merge with Seawater chemistry file
SW.chem <- merge(pH.cals, daily, by="Calib.Date")
mvTris <- SW.chem$Temperature*SW.chem$Slope+SW.chem$Intercept #calculate the mV of the tris standard using the temperature mv relationships in the measured standard curves
STris<-34.5 #salinity of the Tris
phTris<- (11911.08-18.2499*STris-0.039336*STris^2)*(1/(SW.chem$Temperature+273.15))-366.27059+ 0.53993607*STris+0.00016329*STris^2+(64.52243-0.084041*STris)*log(SW.chem$Temperature+273.15)-0.11149858*(SW.chem$Temperature+273.15) #calculate the pH of the tris (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
SW.chem$pH.Total<-phTris+(mvTris/1000-SW.chem$pH.MV/1000)/(R*(SW.chem$Temperature+273.15)*log(10)/F) #calculate the pH on the total scale (Dickson A. G., Sabine C. L. and Christian J. R., SOP 6a)
# pdf("~/MyProjects/Geoduck_Conditioning/RAnalysis/Output/Daily_Treatment_Measures.pdf")
pdf("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/Daily_Treatment_Measures.pdf")
par(mfrow=c(3,2))
plot(SW.chem$Treatment, SW.chem$Temperature, xlab="Treatment", ylab="TemperatureÂ°C", ylim=c(12,20))
plot(SW.chem$Treatment, SW.chem$pH.Total, xlab="Treatment", ylab="pH Total Scale", ylim=c(7.0,8.2))
plot(SW.chem$Treatment, SW.chem$Salinity, xlab="Treatment", ylab="Salinity psu", ylim=c(26,30))
dev.off()
# pdf("~/MyProjects/Geoduck_Conditioning/RAnalysis/Output/Daily_Tank_Measures.pdf")
pdf("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/Daily_Treatment_Measures.pdf")
par(mfrow=c(3,2))
plot(SW.chem$Sample.ID, SW.chem$Temperature, xlab="Tank", ylab="TemperatureÂ°C", ylim=c(12,20),las=2)
plot(SW.chem$Sample.ID, SW.chem$pH.Total, xlab="Tank", ylab="pH Total Scale", ylim=c(7.0,8.2),las=2)
plot(SW.chem$Sample.ID, SW.chem$Salinity, xlab="Tank", ylab="Salinity psu", ylim=c(26,30))
dev.off()
##### DISCRETE TA CALCULATIONS #####
TA <- read.csv("Cumulative_TA_Output.csv", header=TRUE, sep=",", na.strings="NA")  #read in  TA results
##### SEAWATER CHEMISTRY ANALYSIS FOR DISCRETE MEASUREMENTS#####
#Seawater chemistry table from simultaneous TA, pH, temperature and salinity measurements
#merge calculated pH and daily measures with TA data and run seacarb
SW.chem$Sample.ID <- paste(SW.chem$Date, SW.chem$Sample.ID, sep='_') #generate new row with concatenated sample id
SW.chem <- merge(SW.chem,TA, by="Sample.ID", all = TRUE, sort = T) #merge seawater chemistry with total alkalinity
SW.chem <- na.omit(SW.chem) #remove NA
#Calculate CO2 parameters using seacarb
carb.output <- carb(flag=8, var1=SW.chem$pH.Total, var2=SW.chem$TA/1000000, S= SW.chem$Salinity, T=SW.chem$Temperature, P=0, Pt=0, Sit=0, pHscale="T", kf="pf", k1k2="l", ks="d") #calculate seawater chemistry parameters using seacarb
carb.output$ALK <- carb.output$ALK*1000000 #convert to Âµmol kg-1
carb.output$CO2 <- carb.output$CO2*1000000 #convert to Âµmol kg-1
carb.output$HCO3 <- carb.output$HCO3*1000000 #convert to Âµmol kg-1
carb.output$CO3 <- carb.output$CO3*1000000 #convert to Âµmol kg-1
carb.output$DIC <- carb.output$DIC*1000000 #convert to Âµmol kg-1
carb.output <- carb.output[,-c(1,4,5,8,10:13,19)] #subset variables of interest
carb.output <- cbind(SW.chem$Date,  SW.chem$Sample.ID,  SW.chem$Treatment, carb.output) #combine the sample information with the seacarb output
colnames(carb.output) <- c("Date",  "Tank",  "Treatment",	"Salinity",	"Temperature", "pH",	"CO2",	"pCO2","HCO3",	"CO3",	"DIC", "TA",	"Aragonite.Sat") #Rename columns to describe contents
# write.table(carb.output, "~/MyProjects/BioMin_HIS/RAnalysis/Output/Seawater_chemistry_table_Output_All.csv", sep=",", row.names = FALSE) #save data
write.table(carb.output, "C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/Seawater_chemistry_table_Output_All.csv", sep=",", row.names = FALSE) #save data
carbo.melted <- melt(carb.output) #reshape the dataframe to more easily summarize all output parameters
mean.carb.output <-ddply(carbo.melted, .(Treatment, variable), summarize, #For each subset of a data frame, apply function then combine results into a data frame.
N = length(na.omit(value)), #number of records
mean = (mean(value)),       #take the average of the parameters (variables) summarized by treatments
sem = (sd(value)/sqrt(N))) #calculate the SEM as the sd/sqrt of the count or data length
mean.carb.output # display mean and sem
# pdf("~/MyProjects/Geoduck_Conditioning/RAnalysis/Output/Water_Chem_withTA.pdf")
# CHECK YOUR Y AXIS!
pdf("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output/Water_Chem_withTA.pdf")
par(mfrow=c(3,2))
plot(carb.output$Treatment, carb.output$Temperature, xlab="Treatment", ylab="TemperatureÂ°C", ylim=c(12,20))
plot(carb.output$Treatment, carb.output$pH, xlab="Treatment", ylab="pH Total Scale", ylim=c(7.2,8.2))
plot(carb.output$Treatment, carb.output$pCO2, xlab="Treatment", ylab="pCO2 Âµmol kg-1", ylim=c(350,2500))
plot(carb.output$Treatment, carb.output$Salinity, xlab="Treatment", ylab="Salinity psu", ylim=c(25,30))
plot(carb.output$Treatment, carb.output$TA, xlab="Treatment", ylab="Total Alkalinity Âµmol kg-1", ylim=c(1800,2400))
plot(carb.output$Treatment, carb.output$Aragonite.Sat, xlab="Treatment", ylab="Aragonite Saturation State", ylim=c(0,4))
dev.off()
####################################################
rm(list=ls())
#LIBRARY-----------------------------------------------------------------------------------------------------------
library(dplyr)
library(plyr)
library(ggplot2)
library(lme4)
library(lsmeans)
library(ggplot2)
library(plotrix)
#set working directory--------------------------------------------------------------------------------------------------
path <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output")
chem<-read.csv(file.path(path, chem.file), header=T, sep=",", na.string="NA", as.is=T)
# call ouput csv file from both Ta and discrete daily seawater chemistry
chem.file <- "/Seawater_chemistry_table_Output_All.csv"
(chem.2)
chem.2 <- chem[- grep("na", chem$Treatment),] # ommit all rows that have "na" in chem$Treatment
chem.2$Treatment
#set working directory--------------------------------------------------------------------------------------------------
path <- ("C:/Users/samjg/Documents/Notebook/data/Geoduck_Conditioning/RAnalysis/Output")
# call ouput csv file from both Ta and discrete daily seawater chemistry
chem.file <- "/Seawater_chemistry_table_Output_All.csv"
chem<-read.csv(file.path(path, chem.file), header=T, sep=",", na.string="NA", as.is=T)
(chem.2)
chem.2 <- chem[- grep("na", chem$Treatment),] # ommit all rows that have "na" in chem$Treatment
chem.2$Treatment
sal <- chem.2 %>%
group_by(Date, Treatment) %>%
summarise(mean = mean(Salinity),
std = sd(Salinity))
sal
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
names(chem.2)
sal.chem <- aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
pH.chem<- aggregate(pH ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
Temperature.chem<- aggregate(Temperature ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
pCO2.chem<- aggregate(pCO2 ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
TA.chem<- aggregate(TA ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
Aragonite.Sat.chem<- aggregate(Aragonite.Sat ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
Aragonite.Sat.chem
pH.chem
all.summary <- merge(sal.chem, pH.chem, Temperature.chem,
pCO2.chem, TA.chem, Aragonite.Sat.chem, by="Date")
all.summary <- merge(sal.chem, pH.chem, Temperature.chem,
pCO2.chem, TA.chem, Aragonite.Sat.chem, by="Treatment")
all.summary <- merge(sal.chem, pH.chem,  by="Date")
all.summary
sal.chem <- aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
pH.chem<- aggregate(pH ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
Temperature.chem<- aggregate(Temperature ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
pCO2.chem<- aggregate(pCO2 ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
TA.chem<- aggregate(TA ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
Aragonite.Sat.chem<- aggregate(Aragonite.Sat ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
sal.chem
(chem.2)
chem.2
#names(chem.2)
1:13(chem.2)
#names(chem.2)
ncol1:13(chem.2)
#names(chem.2)
ncol(1:13,chem.2)
#names(chem.2)
ncol(4:12,chem.2)
for (i in 4:nrow(chem.2)){
aggregate(i ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
for (i in 4:nrow(chem.2)){
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
x <- for (i in 4:nrow(chem.2)){
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
x
for (i in 4:nrow(chem.2)){
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
for (i in 4:ncolchem.2)){
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
for (i in 4:ncolchem.2){
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
for (i in 4:ncol(chem.2)){
aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
}
for (i in 4:ncol(chem.2)){
H <- aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print
}
for (i in 4:ncol(chem.2)){
H <- aggregate(Salinity ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print(H)
}
for (i in 4:ncol(chem.2)){
H <- aggregate(i ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print(H)
}
for (i in 1:ncol(chem.2)){
H <- aggregate(i ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print(H)
}
for (i in ncol(chem.2)){
H <- aggregate(i ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print(H)
}
columns<-names(chem.2[,4:12])
columns
columns<-names(chem.2[,4:13])
columns
columns.table <- data.frame(columns)
columns.table
for (i in ncol(columns.table$columns)){
H <- aggregate(i ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print(H)
}
H
H
for (i in ncol(columns.table$columns)){
H <- aggregate(i ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
print(H)
}
H)
H
Temperature.chem<- aggregate(Temperature ~ Date + Treatment, data = chem.2,
FUN = function(x) c(mean = mean(x), se = std.error(x)))
Temperature.chem
chem.2[,2]
chem.2[,4]
chem.2[,12]
chem.2[,3]
all.summary <- aggregate(list(chem.2[,4], chem.2[,5], chem.2[,6], chem.2[,7],
chem.2[,8], chem.2[,9], chem.2[,10], chem.2[,11], chem.2[,12]),
by = list(chem.2[,1], chem.2[,3]),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
all.summary
chem.2
all.summary <- aggregate(list(chem.2$Salinity, chem.2$pH.chem, chem.2$Temperature,chem.2$pCO2,
chem.2$CO2, chem.2$TA, chem.2$Aragonite.Sat, chem.2$DIC, chem.2$CO3,
chem.2$HCO3),
by = list(chem.2[,1], chem.2[,3]),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
all.summary <- aggregate(list(chem.2$Salinity, chem.2$pH.chem, chem.2$Temperature,chem.2$pCO2,
chem.2$CO2, chem.2$TA, chem.2$Aragonite.Sat, chem.2$DIC, chem.2$CO3,
chem.2$HCO3),
by = list(chem.2$Date, chem.2$Treatment),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
all.summary
all.summary <- aggregate(list(chem.2$Salinity, chem.2$pH.chem),
by = list(chem.2$Date, chem.2$Treatment),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
chem.2$Salinity
all.summary <- aggregate(list(chem.2[,4], chem.2[,5], chem.2[,6], chem.2[,7],
chem.2[,8], chem.2[,9], chem.2[,10], chem.2[,11], chem.2[,12]),
by = list(chem.2[,1], chem.2[,3]),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
all.summary
chem.2[,4]
names(all.summary)
all.summary <- aggregate(list(chem.2$Salinity, chem.2[,5], chem.2[,6], chem.2[,7],
chem.2[,8], chem.2[,9], chem.2[,10], chem.2[,11], chem.2[,12]),
by = list(chem.2[,1], chem.2[,3]),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
names(all.summary)
all.summary
all.summary <- aggregate(list(chem.2$Salinity, chem.2$Temperature, chem.2[,6], chem.2[,7],
chem.2[,8], chem.2[,9], chem.2[,10], chem.2[,11], chem.2[,12]),
by = list(chem.2[,1], chem.2[,3]),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
names(all.summary)
all.summary <- aggregate(list(chem.2$Salinity, chem.2$Temperature, chem.2[,6], chem.2[,7],
chem.2[,8], chem.2[,9], chem.2[,10], chem.2[,11], chem.2[,12]),
by = list(chem.2$Date, chem.2$Treatment),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
names(all.summary)
columns
Aragonite.Sat.chem
names(all.summary)
all.summary
TA.chem
names(chem.2)
all.summary <- aggregate(list(Salinity, Temperature, pH, CO2,
pCO2, HCO3, CO3, DIC, TA, Aragonite.Sat),
data= chem.2, by = list(chem.2$Date, chem.2$Treatment),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
all.summary <- aggregate(list(Temperature, pH, CO2,
pCO2, HCO3, CO3, DIC, TA, Aragonite.Sat),
data= chem.2, by = list(chem.2$Date, chem.2$Treatment),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
columns<-c(colnames(chem.2[,4:13]))
columns
columns
#For loop for each column
for(q in columns){
summean <- paste0('mean(', q, ')')
summ_name <- paste0(q) #Name of the column to store sum
df_sum <- df.main %>%
group_by(chem.2$Date, chem.2$Treatment) %>%
summarise_(.dots = setNames(summean, summ_name))
#merge the result of new sum column in resultdf
resultdf <- merge(resultdf, df_sum, by = c("Date", "Treatment"))
}
df.main <- data.frame(chem.2$Date,chem.2$Treatment, chem.2$Salinity, chem.2$Temperature,
chem.2$pH, chem.2$CO2,chem.2$pCO2,chem.2$CO3,chem.2$DIC,chem.2$TA,
chem.2$TA,chem.2$Aragonite.Sat,
stringsAsFactors = FALSE)
df.main
#For loop for each column
for(q in columns){
summean <- paste0('mean(', q, ')')
summ_name <- paste0(q) #Name of the column to store sum
df_sum <- df.main %>%
group_by(chem.2$Date, chem.2$Treatment) %>%
summarise_(.dots = setNames(summean, summ_name))
#merge the result of new sum column in resultdf
resultdf <- merge(resultdf, df_sum, by = c("Date", "Treatment"))
}
df.main <- data.frame(Date,Treatment, Salinity, Temperature,
pH, CO2,pCO2,CO3,DIC,TA,
TA,Aragonite.Sat,
stringsAsFactors = FALSE)
df.main <- data.frame(Date,chem.2$Treatment, chem.2$Salinity, chem.2$Temperature,
chem.2$pH, chem.2$CO2,chem.2$pCO2,chem.2$CO3,chem.2$DIC,chem.2$TA,
chem.2$TA,chem.2$Aragonite.Sat,
stringsAsFactors = FALSE)
df.main <- data.frame(chem.2$Date,chem.2$Treatment, chem.2$Salinity, chem.2$Temperature,
chem.2$pH, chem.2$CO2,chem.2$pCO2,chem.2$CO3,chem.2$DIC,chem.2$TA,
chem.2$TA,chem.2$Aragonite.Sat,
stringsAsFactors = FALSE)
df.main
#For loop for each column
for(q in columns){
summean <- paste0('mean(', q, ')')
summ_name <- paste0(q) #Name of the column to store sum
df_sum <- df.main %>%
group_by(chem.2$Date, chem.2$Treatment) %>%
summarise_(.dots = setNames(summean, summ_name))
#merge the result of new sum column in resultdf
resultdf <- merge(resultdf, df_sum, by = c("Date", "Treatment"))
}
columns
df.main <- data.frame(Date,chem.2$Treatment, chem.2$Salinity, chem.2$Temperature,
chem.2$pH, chem.2$CO2,chem.2$pCO2,chem.2$CO3,chem.2$DIC,chem.2$TA,
chem.2$TA,chem.2$Aragonite.Sat, data = chem.2
stringsAsFactors = FALSE)
df.main <- data.frame(Date,Treatment, Salinity, Temperature,
pH, CO2,pCO2,CO3,DIC,TA,
TA,Aragonite.Sat, data =chem.2
stringsAsFactors = FALSE)
df.main <- data.frame("Date" ,Treatment, Salinity, Temperature,
pH, CO2,pCO2,CO3,DIC,TA,
TA ,Aragonite.Sat, data =chem.2
stringsAsFactors = FALSE)
